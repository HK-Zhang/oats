//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class HtmlParser : IParser<Stock>
{
    public List<Stock> stockList = new List<Stock>();

	public virtual void ReadFromPool()
	{
        

        string html="";

        try
        {
            while ((html = DataPool.Pop()) != DataPool.ENDOFQUEUE)
            {
                //stockList.Add(ParseHtml(html));
                if (string.IsNullOrEmpty(html))
                    continue;
              
                Stock stockItem = ParseHtml(html);
                if (stockItem != null)
                {
                    SyncContext.StockQ.Enqueue(stockItem);
                }
            }
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Build Stock Object failed: " + ex.Message + ". Content:" + html);
        }

       

	}

    public virtual Stock ParseHtml(string htmlText)
	{
        Stock stockItem = new Stock();
        string[] vals=htmlText.Split(',');

        if (vals.Length<41 || vals[26] == "-")
        {
            return null;
        }

        stockItem.StockCode = vals[1];
        stockItem.LatestPrice = double.Parse(vals[26]);
        stockItem.MeanPrice = double.Parse(vals[44]);

        if (vals[45] != "-") {
            stockItem.ExternalExp = int.Parse(vals[45]);
        }

        if (vals[46] != "-")
        {
            stockItem.InternalExp = int.Parse(vals[46]);
        }
        

        stockItem.OpenPrice = double.Parse(vals[29]);
        stockItem.PreviousClose = double.Parse(vals[23]);
        stockItem.TodayHigh = double.Parse(vals[30]);
        stockItem.TodayLow = double.Parse(vals[31]);
        stockItem.HandOver = double.Parse(vals[34]);
        stockItem.Volume = double.Parse(vals[36]);
        stockItem.Value = double.Parse(vals[37]);
        stockItem.ttm = double.Parse(vals[36]);
        stockItem.mrp = double.Parse(vals[39]);
        stockItem.TotalMarketCap = double.Parse(vals[40]);
        stockItem.NegotiableMarketCap = double.Parse(vals[41]);
        stockItem.TransactionDate = DateTime.Now;

        return stockItem;
	}

}

