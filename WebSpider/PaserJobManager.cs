//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

/// <summary>
/// Not yet implement multi-thread. So one parser is needed to be initialized.
/// </summary>
/// <typeparam name="T"></typeparam>
public class PaserJobManager<T> : IJobManager
{
	public virtual int TimerInterval
	{
		get;
		set;
	}


    public List<IParser<T>> Parsers = new List<IParser<T>>();

    public PaserJobManager(IParser<T> parser) 
    {
        InitiateJobs(1, parser);
    }

	public virtual void Run()
	{
        Thread.Sleep(TimerInterval);
        OutputHelper.Output("Start to parse data form DataPool.");
        while (SyncContext.ThreadQ.Count > 0 || !DataPool.IsEmpty())
        {
            foreach (IParser<T> item in Parsers)
            {
                item.ReadFromPool();
            }

            //Thread.Sleep(TimerInterval);
        }
        OutputHelper.Output("parse data is completed.");
        
	}

    public virtual void InitiateJobs(int jobCount, IParser<T> parser)
	{
		while(jobCount>0)
        {
            Type t = parser.GetType();
            Parsers.Add((IParser<T>)Activator.CreateInstance(t));
            jobCount--;
        }
	}

    public virtual void InitiateJobs(int jobCount)
    {

    }

	public virtual void SetupTimeInterval(int timeInterval)
	{
        TimerInterval = timeInterval;
	}

}

