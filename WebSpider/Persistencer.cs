//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

public class Persistencer
{
    public const string sqlTemplate = @"INSERT INTO [dbo].[T_StockHistory] ([StockCode], [TotalMarketCap], [NegotiableMarketCap], [OpenPrice], [HandOver], [Volume], [TodayHigh], [TodayLow], [LatestPrice], [PreviousClose], [Value], [mrp], [ttm], [MeanPrice], [ExternalExp], [InternalExp],[TransactionDate]) VALUES (N'{0}', {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15},'{16}')";
    public const string cleanSQLTemplate = @"Delete from [dbo].[T_StockTransaction] where TransactionDate = Convert(varchar,Getdate(),101)";

	public virtual string GenerateSQL(Stock stockItem)
	{
        return string.Format(sqlTemplate, stockItem.StockCode,
            stockItem.TotalMarketCap,
            stockItem.NegotiableMarketCap,
            stockItem.OpenPrice,
            stockItem.HandOver,
            stockItem.Volume,
            stockItem.TodayHigh,
            stockItem.TodayLow,
            stockItem.LatestPrice,
            stockItem.PreviousClose,
            stockItem.Value,
            stockItem.mrp,
            stockItem.ttm,
            stockItem.MeanPrice,
            stockItem.ExternalExp,
            stockItem.InternalExp,
            stockItem.TransactionDate);
	}

    public virtual void UpdateIntoDB()
    {
        OutputHelper.Output("Start to update database.");

        try
        {
            Stock sitem = null;
            while (SyncContext.StockQ.Count > 0)
            {
                sitem = SyncContext.StockQ.Dequeue() as Stock;
                SqlHelper.ExecuteNonQuery(SqlHelper.ConnectionStringLocalTransaction, CommandType.Text, GenerateSQL(sitem), null);
            }
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Update database failed: "+ex.Message);
        }

        OutputHelper.Output("Update database Completed.");
    }

    public virtual void CleanDB()
    {
        OutputHelper.Output("Start to clean database.");

        try
        {
            SqlHelper.ExecuteNonQuery(SqlHelper.ConnectionStringLocalTransaction, CommandType.Text, cleanSQLTemplate, null);
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Clean database failed: " + ex.Message);
        }

        OutputHelper.Output("Clean database Completed.");
    }

}

