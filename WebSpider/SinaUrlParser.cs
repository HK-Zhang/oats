//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HtmlAgilityPack;
using System.Text.RegularExpressions;

public class SinaUrlParser : IParser<String>
{
    private HtmlDocument doc = new HtmlDocument();
    private const string PATTERN = @"\(\d*\)";  
    private const string URLTEMPLATE = @"http://vip.stock.finance.sina.com.cn/corp/go.php/vMS_MarketHistory/stockid/{0}.phtml?year={1}&jidu={2}";

	public virtual void ReadFromPool()
	{
        string html = "";

        try
        {
            while ((html = DataPool.Pop()) != DataPool.ENDOFQUEUE)
            {
                doc.LoadHtml(html);
                HtmlNode node = doc.DocumentNode;

                HtmlNodeCollection yrNodes = node.SelectNodes("//select[@name='year']/option");
                HtmlNodeCollection qtNodes = node.SelectNodes("//select[@name='jidu']/option");
                string code = node.SelectSingleNode("//title").InnerText;
                MatchCollection mc = Regex.Matches(code, PATTERN);
                code = mc[0].ToString().Substring(1, 6);

                for (int i = 0; i < yrNodes.Count; i++)
                {
                    if (i < yrNodes.Count - 1)
                    {
                        for (int j = 1; j < 5; j++)
                        {
                            URLPool.Push(string.Format(URLTEMPLATE, code, yrNodes[i].Attributes["value"].Value, j));
                        }
                    }
                    else
                    {
                        for (int j = 0; j < qtNodes.Count; j++)
                        {
                            URLPool.Push(string.Format(URLTEMPLATE, code, yrNodes[i].Attributes["value"].Value, qtNodes[j].Attributes["value"].Value));
                        }
                    }

                }

            }
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Build SINA URL Object failed: " + ex.Message);
        }
	}

	public virtual String ParseHtml(string htmlText)
	{
        throw new System.NotImplementedException();
	}

}

