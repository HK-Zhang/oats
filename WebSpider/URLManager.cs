//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

public class URLManager
{
	//public const string URLTemplate=@"http://nufm3.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx?type=CT&cmd={0}{1}&sty=FDT&st=z&sr=&p=&ps=&lvl=&cb=&js=var%20jsquote=(x);&token=beb0a0047196124721f56b0f0ff5a27c&rt=0.6847063523412638";
    //public const string URL = @"http://quote.591hx.com/StockList.aspx?item=all_a&name=%E5%88%86%E7%B1%BB";
    public const string URLTemplate = @"http://vip.stock.finance.sina.com.cn/corp/go.php/vMS_MarketHistory/stockid/{0}.phtml?year=2015";


    public const string SQLFetchStockCode = "select StockCode,(case Market when 'sh' then 1 when 'sz' then 2 else 3 end) as Mkt from M_StockInfo";
    public const string SQLFetchStockCodeSina = "select top 300 StockCode as Mkt from M_StockInfo where StockCode not in (select distinct StockCode from T_StockHistory)";


	public static void PrepareURLPool()
	{
        OutputHelper.Output("Start to generate URL.");

        SqlDataReader dr = SqlHelper.ExecuteReader(SqlHelper.ConnectionStringLocalTransaction, CommandType.Text, SQLFetchStockCode, null);

        try
        {
            while (dr.Read())
            {
                URLPool.Push(GenerateURL(new String[] { dr.GetString(0), dr.GetInt32(1).ToString()}));
            }
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Generate URL Failed: "+ex.Message);
        }

        OutputHelper.Output("Generate URL completed.");

	}

    public static string GenerateURL(string[] pars)
	{
        return string.Format(URLTemplate, pars);
	}

    public static void PrepareSinaURLPool() {
        OutputHelper.Output("Start to generate Sina URL.");

        SqlDataReader dr = SqlHelper.ExecuteReader(SqlHelper.ConnectionStringLocalTransaction, CommandType.Text, SQLFetchStockCodeSina, null);

        try
        {
            while (dr.Read())
            {
                URLPool.Push(GenerateURL(new String[] { dr.GetString(0) }));
            }
        }
        catch (Exception ex)
        {
            OutputHelper.Output("Generate Sina URL Failed: " + ex.Message);
        }

        OutputHelper.Output("Generate Sina URL completed.");
    }

}

